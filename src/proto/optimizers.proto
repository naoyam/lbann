////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2014-2019, Lawrence Livermore National Security, LLC.
// Produced at the Lawrence Livermore National Laboratory.
// Written by the LBANN Research Team (B. Van Essen, et al.) listed in
// the CONTRIBUTORS file. <lbann-dev@llnl.gov>
//
// LLNL-CODE-697807.
// All rights reserved.
//
// This file is part of LBANN: Livermore Big Artificial Neural Network
// Toolkit. For details, see http://software.llnl.gov/LBANN or
// https://github.com/LLNL/LBANN.
//
// Licensed under the Apache License, Version 2.0 (the "Licensee"); you
// may not use this file except in compliance with the License.  You may
// obtain a copy of the License at:
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the license.
////////////////////////////////////////////////////////////////////////////////

syntax = "proto3";

package lbann_data;

message Optimizer {
  oneof optimizer_type {
    NoOptimizer no_optimizer = 1;
    AdaGrad adagrad = 2;
    Adam adam = 3;
    HypergradientAdam hypergradient_adam = 4;
    RMSprop rmsprop = 5;
    SGD sgd = 6;
  }

  message NoOptimizer {}

  message AdaGrad {
    double learn_rate = 1;
    double eps = 2;           // Suggested: 1e-8
  }

  message Adam {
    double learn_rate = 1;
    double beta1 = 6;         // Suggested: 0.9
    double beta2 = 7;         // Suggested: 0.99
    double eps = 8;           // Suggested: 1e-8
  }

  message HypergradientAdam {
    double init_learning_rate = 1;
    double hyper_learning_rate = 2;   // Suggested: 1e-7
    double beta1 = 6;                 // Suggested: 0.9
    double beta2 = 7;                 // Suggested: 0.99
    double eps = 8;                   // Suggested: 1e-8
  }

  message RMSprop {
    double learn_rate = 1;
    double decay_rate = 2;
    double eps = 3;           // Suggested: 1e-8
  }

  message SGD {
    double learn_rate = 1;
    double momentum = 2;      // Set to zero for vanilla SGD
    bool nesterov = 4;
  }
}
