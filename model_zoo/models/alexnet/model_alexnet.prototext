trainer {
  block_size: 256
  procs_per_trainer: 0
  num_parallel_readers: 0
}
model {
  data_layout: "data_parallel"
  mini_batch_size: 256
  num_epochs: 72

  ###################################################
  # Objective function
  ###################################################

  objective_function {
    layer_term { layer: "cross_entropy" }
    l2_weight_regularization {
      scale_factor: 0.0005
    }
  }

  ###################################################
  # Metrics
  ###################################################

  metric {
    layer_metric {
      name: "categorical accuracy"
      layer: "top1_accuracy"
      unit: "%"
    }
  }
  metric {
    layer_metric {
      name: "top-5 categorical accuracy"
      layer: "top5_accuracy"
      unit: "%"
    }
  }

  ###################################################
  # Callbacks
  ###################################################
  callback {
    imcomm {
      intertrainer_comm_method: "normal"
      all_optimizers: true
    }
  }
  callback { print {} }
  callback { timer {} }
  # callback { debug {} }
  callback {
    drop_fixed_learning_rate {
      drop_epoch: 20
      drop_epoch: 40
      drop_epoch: 60
      amt: 0.1
    }
  }

  ###################################################
  # start of layers
  ###################################################

  layer {
    name: "data"
    children: "image label"
    data_layout: "data_parallel"
    input {}
  }
  layer {
    name: "image"
    parents: "data"
    data_layout: "data_parallel"
    split {}
  }
  layer {
    name: "label"
    parents: "data"
    data_layout: "data_parallel"
    split {}
  }

  layer {
    name: "conv1"
    parents: "image"
    data_layout: "data_parallel"
    convolution {
      num_dims: 2
      num_output_channels: 96
      conv_dims: "11 11"
      conv_pads: "0 0"
      conv_strides: "4 4"
      has_bias: true
      has_vectors: true
    }
  }
  layer {
    name: "relu1"
    parents: "conv1"
    data_layout: "data_parallel"
    relu {}
  }
  layer {
    name: "norm1"
    parents: "relu1"
    data_layout: "data_parallel"
    local_response_normalization {
      window_width: 5
      lrn_alpha: 0.0001
      lrn_beta: 0.75
      lrn_k: 2
    }
  }
  layer {
    name: "pool1"
    parents: "norm1"
    data_layout: "data_parallel"
    pooling {
      num_dims: 2
      pool_dims: "3 3"
      pool_pads: "0 0"
      pool_strides: "2 2"
      pool_mode: "max"
      has_vectors: true
    }
  }

  layer {
    name: "conv2"
    parents: "pool1"
    data_layout: "data_parallel"
    convolution {
      num_dims: 2
      num_output_channels:  256
      conv_dims: "5 5"
      conv_pads: "2 2"
      conv_strides: "1 1"
      has_bias: true
      has_vectors: true
    }
  }
  layer {
    name: "relu2"
    parents: "conv2"
    data_layout: "data_parallel"
    relu {}
  }
  layer {
    name: "norm2"
    parents: "relu2"
    data_layout: "data_parallel"
    local_response_normalization {
      window_width: 5
      lrn_alpha: 0.0001
      lrn_beta: 0.75
      lrn_k: 2
    }
  }
  layer {
    name: "pool2"
    parents: "norm2"
    data_layout: "data_parallel"
    pooling {
      num_dims: 2
      pool_dims: "3 3"
      pool_pads: "0 0"
      pool_strides: "2 2"
      pool_mode: "max"
      has_vectors: true
    }
  }

  layer {
    name: "conv3"
    parents: "pool2"
    data_layout: "data_parallel"
    convolution {
      num_dims: 2
      num_output_channels:  384
      conv_dims: "3 3"
      conv_pads: "1 1"
      conv_strides: "1 1"
      has_bias: true
      has_vectors: true
    }
  }
  layer {
    name: "relu3"
    parents: "conv3"
    data_layout: "data_parallel"
    relu {}
  }

  layer {
    name: "conv4"
    parents: "relu3"
    data_layout: "data_parallel"
    convolution {
      num_dims: 2
      num_output_channels:  384
      conv_dims: "3 3"
      conv_pads: "1 1"
      conv_strides: "1 1"
      has_bias: true
      has_vectors: true
    }
  }
  layer {
    name: "relu4"
    parents: "conv4"
    data_layout: "data_parallel"
    relu {}
  }

  layer {
    name: "conv5"
    parents: "relu4"
    data_layout: "data_parallel"
    convolution {
      num_dims: 2
      num_output_channels:  256
      conv_dims: "3 3"
      conv_pads: "1 1"
      conv_strides: "1 1"
      has_bias: true
      has_vectors: true
    }
  }
  layer {
    name: "relu5"
    parents: "conv5"
    data_layout: "data_parallel"
    relu {}
  }
  layer {
    name: "pool5"
    parents: "relu5"
    data_layout: "data_parallel"
    pooling {
      num_dims: 2
      pool_dims: "3 3"
      pool_pads: "0 0"
      pool_strides: "2 2"
      pool_mode: "max"
      has_vectors: true
    }
  }

  layer {
    name: "fc6"
    parents: "pool5"
    data_layout: "model_parallel"
    fully_connected {
      num_neurons: 4096
      has_bias: true
    }
  }
  layer {
    name: "relu6"
    parents: "fc6"
    data_layout: "model_parallel"
    relu {}
  }
  layer {
    name: "drop6"
    parents: "relu6"
    data_layout: "model_parallel"
    dropout {
      keep_prob: 0.5
    }
  }

  layer {
    name: "fc7"
    parents: "drop6"
    data_layout: "model_parallel"
    fully_connected {
      num_neurons: 4096
      has_bias: true
    }
  }
  layer {
    name: "relu7"
    parents: "fc7"
    data_layout: "model_parallel"
    relu {}
  }
  layer {
    name: "drop7"
    parents: "relu7"
    data_layout: "model_parallel"
    dropout {
      keep_prob: 0.5
    }
  }

  layer {
    name: "fc8"
    parents: "drop7"
    data_layout: "model_parallel"
    hint_layer: "label"
    fully_connected {
      has_bias: false
    }
  }

  layer {
    name: "prob"
    parents: "fc8"
    data_layout: "data_parallel"
    softmax {}
  }

  layer {
    name: "cross_entropy"
    parents: "prob label"
    data_layout: "data_parallel"
    cross_entropy {}
  }

  layer {
    name: "top1_accuracy"
    parents: "prob label"
    data_layout: "data_parallel"
    categorical_accuracy {}
  }

  layer {
    name: "top5_accuracy"
    parents: "prob label"
    data_layout: "data_parallel"
    top_k_categorical_accuracy { k: 5 }
  }

}
