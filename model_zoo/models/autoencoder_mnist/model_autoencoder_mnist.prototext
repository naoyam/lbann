trainer {
  block_size: 256
  procs_per_trainer: 0
  num_parallel_readers: 0
}
model {
  data_layout: "model_parallel"
  mini_batch_size: 10
  num_epochs: 10

  ###################################################
  # Objective function
  ###################################################

  objective_function {
    layer_term { layer: "mean_squared_error" }
  }

  ###################################################
  # Callbacks
  ###################################################
  callback {
    print {
      interval: 1
    }
  }

  ###################################################
  # start of layers
  ###################################################

  #######
  # INPUT
  #######
  layer {
    name: "data"
    children: "image dummy"
    data_layout: "data_parallel"
    input {}
  }
  layer {
    parents: "data"
    name: "image"
    data_layout: "data_parallel"
    split {}
  }
  layer {
    parents: "data"
    name: "dummy"
    data_layout: "data_parallel"
    dummy {}
  }

  # FULLY_CONNECTED encode1
  #################
  layer {
    parents: "image"
    name: "encode1"
    data_layout: "model_parallel"
    fully_connected {
      num_neurons: 1000
      has_bias: true
    }
  }

  # RELU relu1
  ######
  layer {
    parents: "encode1"
    name: "relu1"
    data_layout: "model_parallel"
    relu {
    }
  }

  # FULLY_CONNECTED encode2
  #################
  layer {
    parents: "relu1"
    name: "encode2"
    data_layout: "model_parallel"
    fully_connected {
      num_neurons: 500
      has_bias: true
    }
  }

  # RELU relu2
  #######
  layer {
    parents: "encode2"
    name: "relu2"
    data_layout: "model_parallel"
    relu {
    }
  }

  # FULLY_CONNECTED encode3
  #################
  layer {
    parents: "relu2"
    name: "encode3"
    data_layout: "model_parallel"
    fully_connected {
      num_neurons: 250
      has_bias: true
    }
  }

  #######
  # RELU relu3
  #######
  layer {
    parents: "encode3"
    name: "relu3"
    data_layout: "model_parallel"
    relu {
    }
  }

  # FULLY_CONNECTED encode4
  #################
  layer {
    parents: "relu3"
    name: "encode4"
    data_layout: "model_parallel"
    fully_connected {
      num_neurons: 30
      has_bias: true
    }
  }

  # FULLY_CONNECTED decode4
  #################
  layer {
    parents: "encode4"
    name: "decode4"
    data_layout: "model_parallel"
    fully_connected {
      num_neurons: 250
      has_bias: true
    }
  }

  # RELU 4
  #######
  layer {
    parents: "decode4"
    name: "relu4"
    data_layout: "model_parallel"
    relu {
    }
  }

  # FULLY_CONNECTED decode3
  #################
  layer {
    parents: "relu4"
    name: "decode3"
    data_layout: "model_parallel"
    fully_connected {
      num_neurons: 500
      has_bias: true
    }
  }


  # RELU relu5
  #######
  layer {
    parents: "decode3"
    name: "relu5"
    data_layout: "model_parallel"
    relu {
    }
  }

  # FULLY_CONNECTED decode2
  #################
  layer {
    parents: "relu5"
    name: "decode2"
    data_layout: "model_parallel"
    fully_connected {
      num_neurons: 1000
      has_bias: true
    }
  }

  # RELU relu6
  #######
  layer {
    parents: "decode2"
    name: "relu6"
    data_layout: "model_parallel"
    relu {
    }
  }

  # FULLY_CONNECTED decode1
  #################
  layer {
    parents: "relu6"
    name: "decode1"
    data_layout: "model_parallel"
    hint_layer: "image"
    fully_connected {
      has_bias: true
    }
  }

  #######
  # SIGMOID sigmoid
  #######
  layer {
    parents: "decode1"
    name: "reconstruction"
    data_layout: "model_parallel"
    sigmoid {
    }
  }

  #################
  # RECONSTRUCTION
  #################
  layer {
    parents: "reconstruction image"
    name: "mean_squared_error"
    data_layout: "data_parallel"
    mean_squared_error {}
  }

  ###################################################
  # end of layers
  ###################################################
}
