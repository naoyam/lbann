trainer {
}
model {
  data_layout: "model_parallel"
  mini_batch_size: 50
  num_epochs: 20

  ###################################################
  # Objective function
  ###################################################

  objective_function {
    layer_term { layer: "mse" }
  }

  ###################################################
  # Metrics
  ###################################################
  metric {
    layer_metric {
      layer: "pearson_r"
    }
  }

  ###################################################
  # Callbacks
  ###################################################
  callback {
    print {
      interval: 1
    }
  }

  #callback {
  #  dump_weights {
  #    basename: "."
  #  }
  #}

  ###################################################
  # start of layers
  ###################################################

  #######
  # INPUT
  #######
  layer {
    name: "data"
    #children: "encode1 recon_data"
    data_layout: "data_parallel"
    input {
      target_mode: "N/A"
    }
  }

  layer {
    name: "recon_data"
    parents: "data"
    data_layout: "data_parallel"
    identity { }
  }

  #################
  # FULLY_CONNECTED encode1
  #################

  weights {
    name: "w1"
    initializer {
      glorot_uniform_initializer {}
    }
  }

  layer {
    name: "encode1"
    parents: "recon_data"
    data_layout: "model_parallel"
    weights: "w1"
    fully_connected {
      num_neurons: 1000
      has_bias: true
      transpose: false
    }
  }

  # SIGMOID
  ######
  layer {
    parents: "encode1"
    name: "sigmoid1"
    data_layout: "model_parallel"
    sigmoid {
    }
  }


  #################
  # FULLY_CONNECTED decode1
  #################
  layer {
    parents: "sigmoid1"
    name: "decode1"
    data_layout: "model_parallel"
    weights: "w1"
    num_neurons_from_data_reader: true
    fully_connected {
      has_bias: true
      transpose: true
    }
  }

  # SIGMOID
  #########
  layer {
    parents: "decode1"
    name: "sigmoid2"
    data_layout: "model_parallel"
    sigmoid {
    }
  }

  #pearson_r: A Tensor representing the current Pearson product-moment correlation coefficient,
  #the value of cov(predictions, labels) / sqrt(var(predictions) * var(labels))
  layer {
    parents: "sigmoid2 recon_data"
    children: "pearson_r"
    name: "unbiased_covariance"
    covariance { biased: false }
    data_layout: "model_parallel"
   }

  layer {
    parents: "sigmoid2"
    children: "mult"
    name: "pred_variance"
    variance { biased: false }
    data_layout: "model_parallel"
   }

  layer {
    parents: "recon_data"
    children: "mult"
    name: "data_variance"
    variance { biased: false }
    data_layout: "model_parallel"
   }

  layer {
    parents: "pred_variance data_variance"
    name: "mult"
    multiply { }
    data_layout: "model_parallel"
   }

  layer {
    parents: "mult"
    name: "sqrt"
    sqrt { }
    data_layout: "model_parallel"
   }


  layer {
    parents: "unbiased_covariance sqrt"
    name: "pearson_r"
    divide { }
    data_layout: "model_parallel"
   }

  layer {
    parents: "recon_data sigmoid2"
    name: "mse"
    mean_squared_error {}
    data_layout: "model_parallel"
  }

  ###################################################
  # end of layers
  ###################################################
}
