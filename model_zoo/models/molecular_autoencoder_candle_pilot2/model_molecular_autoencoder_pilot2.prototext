trainer {
  num_parallel_readers: 1
}
model {
  mini_batch_size: 512
  num_epochs: 4

  ##############################################
  # Objective function
  ##############################################

  objective_function {
    layer_term { layer: "mean_squared_error" }
    l2_weight_regularization {
      scale_factor: 0.0005
    }
  }

  ##############################################
  # Callbacks
  ##############################################

  callback { print {} }
  callback { timer {} }

  ##############################################
  # Layers
  ##############################################

  ######################
  # Data
  ######################

  layer {
    name: "input"
    children: "data label"
    data_layout: "data_parallel"
    input {}
  }
  layer {
    parents: "input"
    name: "data"
    data_layout: "data_parallel"
    split {}
  }
  layer {
    parents: "input"
    name: "label"
    data_layout: "data_parallel"
    dummy {}
  }

  ######################
  # Encoder
  ######################

  layer {
    parents: "data"
    name: "encode1_fc"
    data_layout: "data_parallel"
    fully_connected {
      num_neurons: 12
      has_bias: true
    }
  }
  layer {
    parents: "encode1_fc"
    name: "encode1"
    data_layout: "data_parallel"
    relu {}
  }

  ######################
  # Decoder
  ######################

  weights {
    name: "decode1_fc_matrix"
    initializer {
      glorot_uniform_initializer {}
    }
  }
  layer {
    parents: "encode1"
    name: "decode1_fc"
    weights: "decode1_fc_matrix"
    hint_layer: "data"
    data_layout: "data_parallel"
    fully_connected {
      has_bias: true
    }
  }
  layer {
    parents: "decode1_fc"
    name: "decode1"
    data_layout: "data_parallel"
    relu {
    }
  }

  ######################
  # Reconstruction
  ######################

  layer {
    parents: "decode1 data"
    name: "mean_squared_error"
    data_layout: "data_parallel"
    mean_squared_error {}
  }

}
