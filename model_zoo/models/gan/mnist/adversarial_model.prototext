#Adversarial Model
trainer {
}
model {
  data_layout: "model_parallel"
  mini_batch_size: 32
  super_steps: 100000
  num_epochs: 1

  ###################################################
  # Objective function
  ###################################################

  objective_function {
    layer_term { layer: "binary_cross_entropy" }
    l2_weight_regularization {
      scale_factor: 1e-4
    }
  }

  ###################################################
  # Metrics
  ###################################################

  metric {
    layer_metric {
      name: "categorical accuracy"
      layer: "categorical_accuracy"
      unit: "%"
    }
  }

  ###################################################
  # Callbacks
  ###################################################
  callback {
    print {
      interval: 1
    }
  }
  callback { timer {} }

  callback {
    dump_outputs {
      directory: "/usr/workspace/wsa/jacobs32/github.saj.lbann/fcgan_dump_acts_32mb/"
      layers: "fc4_tanh sum"
      #layers: "fc4_tanh data sum"
      #batch_interval: 844
      execution_modes: "test"
    }
  }
  callback {
    save_images {
      image_prefix: "/usr/workspace/wsa/jacobs32/github.saj.lbann/fcgan_dump_images_32mb/"
      layers: "fc4_tanh sum"
      image_format: "png"
    }
  }

  ###################################################
  # start of layers
  ###################################################


  # INPUT real data
  layer {
    name: "input"
    children: "input label"
    data_layout: "data_parallel"
    input {}
  }
  layer {
    parents: "input"
    name: "data"
    data_layout: "data_parallel"
    split {}
  }
  layer {
    parents: "input"
    name: "label"
    data_layout: "data_parallel"
    split {}
  }

  # Divide mini-batch samples into two halves
  layer {
    name: "mb_index"
    mini_batch_index {}
  }
  layer {
    name: "mb_size"
    mini_batch_size {}
  }
  layer {
    parents: "mb_index mb_size"
    name: "mb_factor"
    divide {}
  }
  layer {
    parents: "mb_factor"
    name: "in_second_half_scalar"
    round {}
  }
  layer {
    parents: "in_second_half_scalar"
    name: "in_second_half_scalar3d"
    reshape {
      dims: "1 1 1"
    }
  }
  layer {
    parents: "in_second_half_scalar3d"
    name: "in_second_half"
    hint_layer: "data"
    tessellate {}
  }
  layer {
    parents: "in_second_half"
    name: "in_first_half"
    not {}
  }

  #ZERO
  layer {
    parents: "data in_second_half"
    name: "zero_data"
    data_layout: "data_parallel"
    multiply {}
  }


  #Generator Path

  #NOISE
  layer {
    name: "noise"
    data_layout: "data_parallel"
    gaussian {
      mean: 0.0
      stdev: 1.0
      neuron_dims: "100"
    }
  }

  weights {
     name: "gen_fc_weights"
     optimizer { no_optimizer {} }
     initializer {
       glorot_normal_initializer {}
     }
  }
  #############
  # FC 1
  #############
  layer {
    name: "fc1"
    parents: "noise"
    data_layout: "data_parallel"
    #weights: "gen_fc_weights"
    fully_connected {
      num_neurons: 256
      has_bias: true
    }
  }
  layer {
    parents: "fc1"
    name: "fc1_relu"
    data_layout: "data_parallel"
    leaky_relu {
    }
  }
  layer {
    parents: "fc1_relu"
    name: "fc1_bn"
    data_layout: "data_parallel"
    batch_normalization {
      decay: 0.9
      scale_init: 1.0
      bias_init: 0.0
      epsilon: 1e-5
    }
  }

  #############
  # FC 2
  #############
  layer {
    name: "fc2"
    parents: "fc1_bn"
    data_layout: "data_parallel"
    #weights: "gen_fc_weights"
    fully_connected {
      num_neurons: 512
      has_bias: true
    }
  }
  layer {
    parents: "fc2"
    name: "fc2_relu"
    data_layout: "data_parallel"
    leaky_relu {
    }
  }
  layer {
    parents: "fc2_relu"
    name: "fc2_bn"
    data_layout: "data_parallel"
    batch_normalization {
      decay: 0.9
      scale_init: 1.0
      bias_init: 0.0
      epsilon: 1e-5
    }
  }

  #############
  # FC 3
  #############
  layer {
    name: "fc3"
    parents: "fc2_bn"
    data_layout: "data_parallel"
    #weights: "gen_fc_weights"
    fully_connected {
      num_neurons: 1024
      has_bias: true
    }
  }
  layer {
    parents: "fc3"
    name: "fc3_relu"
    data_layout: "data_parallel"
    leaky_relu {
    }
  }
  layer {
    parents: "fc3_relu"
    name: "fc3_bn"
    data_layout: "data_parallel"
    batch_normalization {
      decay: 0.9
      scale_init: 1.0
      bias_init: 0.0
      epsilon: 1e-5
    }
  }

  #############
  # FC 4
  #############
  layer {
    name: "fc4"
    parents: "fc3_bn"
    data_layout: "data_parallel"
    #weights: "gen_fc_weights"
    fully_connected {
      num_neurons: 784
      has_bias: true
    }
  }
  layer {
    parents: "fc4"
    name: "fc4_tanh"
    data_layout: "data_parallel"
    tanh{
    }
  }

  #######
  # Reshape for discrimnator
  ######
  layer {
    name: "reshape1"
    parents: "fc4_tanh"
    data_layout: "data_parallel"
    reshape{
      num_dims: 3
      dims: "1 28 28"
    }
  }


  #ZERO
  layer {
    parents: "reshape1 in_first_half"
    name: "zero_fake"
    data_layout: "data_parallel"
    multiply {}
  }

  #SUM
  layer {
    name: "sum"
    parents: "zero_data zero_fake"
    data_layout: "data_parallel"
    sum {
    }
  }


#DISCRIMINATOR MODEL

  weights {
     name: "dis_flatten_weights"
     optimizer { no_optimizer {} }
     initializer {
       he_normal_initializer {}
     }
  }
 # FULLY_CONNECTED dis_flatten
  layer {
    parents: "sum"
    name: "dis_flatten_proxy"
    data_layout: "data_parallel"
    weights: "dis_flatten_weights"
    fully_connected {
      num_neurons: 784
      has_bias: true
    }
  }

  weights {
     name: "dis_fc1_weights"
     optimizer { no_optimizer {} }
     initializer {
       glorot_normal_initializer {}
     }
  }
  layer {
    name: "dis_fc1_proxy"
    parents: "dis_flatten_proxy"
    data_layout: "data_parallel"
    weights: "dis_fc1_weights"
    fully_connected {
      num_neurons: 512
      has_bias: true
    }
  }

  layer {
    parents: "dis_fc1_proxy"
    name: "dis_fc1_relu"
    data_layout: "data_parallel"
    leaky_relu {
    }
  }

  weights {
     name: "dis_fc2_weights"
     optimizer { no_optimizer {} }
     initializer {
       glorot_normal_initializer {}
     }
  }
  layer {
    parents: "dis_fc1_relu"
    name: "dis_fc2_proxy"
    data_layout: "data_parallel"
    weights: "dis_fc2_weights"
    fully_connected {
      num_neurons: 256
      has_bias: true
    }
  }

  layer {
    parents: "dis_fc2_proxy"
    name: "dis_fc2_relu"
    data_layout: "data_parallel"
    leaky_relu {
    }
  }

 # FULLY_CONNECTED fc1
  weights {
     name: "dis_fc3_weights"
     optimizer { no_optimizer {} }
     initializer {
       glorot_normal_initializer {}
     }
  }
  layer {
    parents: "dis_fc2_relu"
    name: "dis_fc3_proxy"
    data_layout: "data_parallel"
    weights: "dis_fc3_weights"
    fully_connected {
      num_neurons: 2
      has_bias: true
    }
  }

  layer {
    parents: "dis_fc3_proxy"
    name: "sigmoid2"
    data_layout: "data_parallel"
    sigmoid {
    }
  }

 #Softmax
  layer {
    parents: "sigmoid2"
    name: "prob"
    data_layout: "data_parallel"
    softmax {}
  }

  layer {
    parents: "prob label"
    name: "binary_cross_entropy"
    data_layout: "data_parallel"
    binary_cross_entropy {}
  }
  layer {
    parents: "prob label"
    name: "categorical_accuracy"
    data_layout: "data_parallel"
    categorical_accuracy {}
  }

}
